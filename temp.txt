import * as cdk from 'aws-cdk-lib';
import { Construct } from 'constructs';
import * as lambda from 'aws-cdk-lib/aws-lambda';
import * as ssm from 'aws-cdk-lib/aws-ssm';
import * as iam from 'aws-cdk-lib/aws-iam';
import * as scheduler from 'aws-cdk-lib/aws-scheduler';

export class LambdaConcurrencyAutomationStack extends cdk.Stack {
  constructor(scope: Construct, id: string, props?: cdk.StackProps) {
    super(scope, id, props);

    // Lambda function
    const fn = new lambda.Function(this, 'MyFunction', {
      runtime: lambda.Runtime.NODEJS_18_X,
      code: lambda.Code.fromAsset('lambda'),
      handler: 'index.handler',
      reservedConcurrentExecutions: 2, // initial concurrency
    });

    // IAM Role for Automation
    const automationRole = new iam.Role(this, 'AutomationRole', {
      assumedBy: new iam.ServicePrincipal('ssm.amazonaws.com'),
      managedPolicies: [
        iam.ManagedPolicy.fromAwsManagedPolicyName('service-role/AmazonSSMAutomationRole'),
      ],
    });

    fn.grant(automationRole, 'lambda:PutFunctionConcurrency');

    // SSM Automation Document (Runbook)
    const runbookContent = {
      schemaVersion: '0.3',
      description: 'Update Lambda provisioned concurrency',
      assumeRole: '{{ AutomationAssumeRole }}',
      parameters: {
        FunctionName: { type: 'String' },
        TargetConcurrency: { type: 'String' },
        AutomationAssumeRole: { type: 'String' }
      },
      mainSteps: [
        {
          name: 'UpdateProvisionedConcurrency',
          action: 'aws:invokeLambdaFunction',
          inputs: {
            FunctionName: 'arn:aws:lambda:::function:PutFunctionConcurrency',
            Payload: {
              FunctionName: '{{ FunctionName }}',
              ProvisionedConcurrentExecutions: '{{ TargetConcurrency }}'
            }
          }
        }
      ]
    };

    const document = new ssm.CfnDocument(this, 'ConcurrencyRunbook', {
      content: runbookContent,
      name: 'SetLambdaConcurrencyRunbook',
      documentType: 'Automation',
      documentFormat: 'YAML'
    });

    // Scheduler to trigger runbook (Upscale example)
    new scheduler.CfnSchedule(this, 'UpscaleSchedule', {
      name: 'UpscaleLambdaConcurrency',
      scheduleExpression: 'cron(0 9 * * ? *)', // every day 9 AM
      target: {
        arn: 'arn:aws:ssm:region:account-id:automation-definition/SetLambdaConcurrencyRunbook',
        roleArn: automationRole.roleArn,
        input: JSON.stringify({
          FunctionName: fn.functionName,
          TargetConcurrency: "10",
          AutomationAssumeRole: automationRole.roleArn
        })
      }
    });

    // Downscale example
    new scheduler.CfnSchedule(this, 'DownscaleSchedule', {
      name: 'DownscaleLambdaConcurrency',
      scheduleExpression: 'cron(0 18 * * ? *)', // every day 6 PM
      target: {
        arn: 'arn:aws:ssm:region:account-id:automation-definition/SetLambdaConcurrencyRunbook',
        roleArn: automationRole.roleArn,
        input: JSON.stringify({
          FunctionName: fn.functionName,
          TargetConcurrency: "2",
          AutomationAssumeRole: automationRole.roleArn
        })
      }
    });
  }
}
